name: TCI SIT

on:
  workflow_call:
    secrets:
      CHC_HTTP_PROXY:
        required: true
      CHC_HTTPS_PROXY:
        required: true  
      CHC_GITHUB_PAT:
        required: true  
      JFROG_USERNAME:
        required: true
      JFROG_TOKEN:
        required: true  
      DOCKER_REGISTRY:
        required: true  
      SIT_TCI_CLIENT_ID:
        required: true  
      SIT_TCI_CLIENT_SECRET:
        required: true
    inputs:
      DOCKER_IMAGE:
        required: true
        type: string
      INTERFACE_NAME:
        required: true
        type: string
      instance_name:
        description: 'Instance-Name'
        required: false
        type: string
          
env:
  HTTP_PROXY: ${{ secrets.CHC_HTTP_PROXY }}
  HTTPS_PROXY: ${{ secrets.CHC_HTTPS_PROXY }}
  GITHUB_PAT: ${{ secrets.CHC_GITHUB_PAT }}
  JFROG_USERNAME:  ${{ secrets.JFROG_USERNAME }}
  JFROG_TOKEN: ${{ secrets.JFROG_TOKEN }}
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  CIC_TCI_CLIENTID_CICD: ${{ secrets.SIT_TCI_CLIENT_ID }}
  CIC_TCI_CLIENTSECRET_CICD: ${{ secrets.SIT_TCI_CLIENT_SECRET }}
  BUILD_ID: ${{ github.run_number }}
  WORKSPACE: ${{ github.workspace }}
  BRANCH_NAME: ${{github.event.inputs.branch_name}}
  BUILD_NUMBER: ${{github.event.inputs.build_number}}
  REPONAME: ${{ github.event.repository.name }}
  INTERFACE_NAME: ${{ inputs.INTERFACE_NAME }}
  INSTANCE_NAME: ${{ github.event.inputs.instance_name }}
  Sharedmodule_instance_name: ${{ github.event.inputs.Sharedmodule_instance_name }}
  APP_CONF_INSTANCECOUNT: ${{ github.event.inputs.instance_count }}
  NO_PROXY: 'cloud.local,sanofi.com,docker'
      
jobs:
  Build-Deployment:
    if: ${{ github.event.inputs.workflow_type == 'Build-Deploy' }} 
    runs-on: ['atmos-aws-arc-runner-set']
    container:
      image: ${{ inputs.DOCKER_IMAGE }}
      credentials:
        username: ${{ env.JFROG_USERNAME }}
        password: ${{ env.JFROG_TOKEN }}
    defaults:
      run:
        shell: bash
    steps:
      - name: add repo to safe directory
        run: |
          git config --global --add safe.directory /__w/${REPONAME}/${REPONAME}
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
          submodules: 'true'
          ref: ${{ env.BRANCH_NAME }}
          token: ${{ env.GITHUB_PAT }}

      - name: Checkout Devops scripts
        uses: actions/checkout@v2.3.4
        with:
          repository: Sanofi-GitHub/chc-devops-scripts
          ref: main
          path: chc_scripts
          token: ${{ env.GITHUB_PAT }}

      - name: Checkout sharedmodule properties
        uses: actions/checkout@v2.3.4
        with:
          repository: Sanofi-GitHub/TCI-sharedmodule-config
          ref: main
          path: shared_module
          token: ${{ env.GITHUB_PAT }}

      - name: Checkout sharedmodules
        run: |
          cd ${WORKSPACE}
          if [ -z "${INSTANCE_NAME}" ]; then
            bash ${WORKSPACE}/chc_scripts/cicd-scripts/TCI-Deployment/sharedmodule.sh ${WORKSPACE}/config/SIT/config_test.json
          else
            bash ${WORKSPACE}/chc_scripts/cicd-scripts/TCI-Deployment/sharedmodule.sh ${WORKSPACE}/config/SIT/${INSTANCE_NAME}/config_test.json
          fi
      - name: Update pom.xml with jfrog details
        run: |
          cd ${WORKSPACE}/chc_scripts/cicd-scripts/TCI-Deployment
          python3.9 update_pom.py "${WORKSPACE}/src/${INTERFACE_NAME}/${INTERFACE_NAME}.application.parent/pom.xml"
         
      - name: Maven Build
        run: |
          cd ${WORKSPACE}/src/${INTERFACE_NAME}/${INTERFACE_NAME}.application.parent
          cat pom.xml
          mvn clean package

      - name: create updated property file
        run: |
          cd ${WORKSPACE}
          if [ -z "${INSTANCE_NAME}" ]; then
            application_filename="${WORKSPACE}/config/SIT/test.properties"
          else
            application_filename="${WORKSPACE}/config/SIT/${INSTANCE_NAME}/test.properties"
          fi
          if [ -z "${Sharedmodule_instance_name}" ]; then
            sharedmodule_filename="${WORKSPACE}/shared_module/config/Test/sharedmodule.properties"
          else
            sharedmodule_filename="${WORKSPACE}/shared_module/config/Test/${Sharedmodule_instance_name}/sharedmodule.properties"
          fi
           bash ${WORKSPACE}/chc_scripts/cicd-scripts/TCI-Deployment/update_properties.sh -application_file=$application_filename -sharedmodule_file=$sharedmodule_filename
          cd ${WORKSPACE}/config/SIT
          if [ -z "${INSTANCE_NAME}" ]; then
            mv manifest_test.json manifest.json
          else
           mv ${INSTANCE_NAME}/manifest_test.json manifest.json
          fi
          
      - name: Upload artifact to jfrog
        run: |
          cd ${WORKSPACE}
          if [ -z "${INSTANCE_NAME}" ]; then
            curl -H "X-JFrog-Art-Api:${{ env.JFROG_TOKEN }}" -T src/${INTERFACE_NAME}/${INTERFACE_NAME}.application/target/${INTERFACE_NAME}.application_1.0.0.ear "https://sanofi.jfrog.io/artifactory/maven-chc-maven-local/${INTERFACE_NAME}/SIT/SIT-${BUILD_ID}/"
            curl -H "X-JFrog-Art-Api:${{ env.JFROG_TOKEN }}" -T config/SIT/test.properties "https://sanofi.jfrog.io/artifactory/maven-chc-maven-local/${INTERFACE_NAME}/SIT/SIT-${BUILD_ID}/"
          else
            curl -H "X-JFrog-Art-Api:${{ env.JFROG_TOKEN }}" -T src/${INTERFACE_NAME}/${INTERFACE_NAME}.application/target/${INTERFACE_NAME}.application_1.0.0.ear "https://sanofi.jfrog.io/artifactory/maven-chc-maven-local/${INTERFACE_NAME}/SIT/SIT-${BUILD_ID}/"
            curl -H "X-JFrog-Art-Api:${{ env.JFROG_TOKEN }}" -T config/SIT/${INSTANCE_NAME}/test.properties "https://sanofi.jfrog.io/artifactory/maven-chc-maven-local/${INTERFACE_NAME}/SIT/SIT-${BUILD_ID}/"
          fi
      - name: TCI Deployment
        run: |
          cd $WORKSPACE
          if [ -z "${INSTANCE_NAME}" ]; then
            config_file="${WORKSPACE}/config/SIT/config_test.json"
          else
            config_file="${WORKSPACE}/config/SIT/${INSTANCE_NAME}/config_test.json"
          fi
          APP_AGENT_KEY=$(jq -r '.hybrid_agent_key' "$config_file")
          export APP_AGENT_KEY=$APP_AGENT_KEY
          echo "hybrid agent key is ${APP_AGENT_KEY}"
          export DEPLOYMENT_SCRIPT=${WORKSPACE}/chc_scripts/cicd-scripts/TCI-Deployment/bin/tci
          export EAR_PATH=${WORKSPACE}/src/${INTERFACE_NAME}/${INTERFACE_NAME}.application/target
          if [ -z "${INSTANCE_NAME}" ]; then
            bash ${DEPLOYMENT_SCRIPT}/chc-render-application-properties.sh ${WORKSPACE}/config/SIT/test.properties /tmp/test.json
            bash ${DEPLOYMENT_SCRIPT}/chc-app-manage.sh deploy ${INTERFACE_NAME} /tmp/test.json ${EAR_PATH}/${INTERFACE_NAME}.application_1.0.0.ear ${WORKSPACE}/config/SIT/manifest.json       
          else
            bash ${DEPLOYMENT_SCRIPT}/chc-render-application-properties.sh ${WORKSPACE}/config/SIT/${INSTANCE_NAME}/test.properties /tmp/test.json
            bash ${DEPLOYMENT_SCRIPT}/chc-app-manage.sh deploy ${INTERFACE_NAME}_${INSTANCE_NAME} /tmp/test.json ${EAR_PATH}/${INTERFACE_NAME}.application_1.0.0.ear ${WORKSPACE}/config/SIT/manifest.json       
          fi       
      
  Deployment:
    if: ${{ github.event.inputs.workflow_type == 'Deploy' }} 
    runs-on: ['atmos-aws-arc-runner-set']
    container:
      image: ${{ inputs.DOCKER_IMAGE }}
      credentials:
        username: ${{ env.JFROG_USERNAME }}
        password: ${{ env.JFROG_TOKEN }}
    defaults:
      run:
        shell: bash
    steps:
      - name: add repo to safe directory
        run: |
          git config --global --add safe.directory /__w/${REPONAME}/${REPONAME}
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
          submodules: 'true'
          ref: ${{ env.BRANCH_NAME }}
          token: ${{ env.GITHUB_PAT }}

      - name: Checkout Devops scripts
        uses: actions/checkout@v2.3.4
        with:
          repository: Sanofi-GitHub/chc-devops-scripts
          ref: main
          path: chc_scripts
          token: ${{ env.GITHUB_PAT }}

      - name: Checkout sharedmodule properties
        uses: actions/checkout@v2.3.4
        with:
          repository: Sanofi-GitHub/TCI-sharedmodule-config
          ref: main
          path: shared_module
          token: ${{ env.GITHUB_PAT }}

      - name: Download the build artifact
        run: |
          cd ${WORKSPACE}
          curl -H "X-JFrog-Art-Api:${{ env.JFROG_TOKEN }}" -O "https://sanofi.jfrog.io/artifactory/maven-chc-maven-local/${INTERFACE_NAME}/Development/Dev-${BUILD_NUMBER}/${INTERFACE_NAME}.application_1.0.0.ear"

      - name: create updated property file
        run: |
          cd ${WORKSPACE}
          if [ -z "${INSTANCE_NAME}" ]; then
            bash ${WORKSPACE}/chc_scripts/cicd-scripts/TCI-Deployment/update_properties.sh -application_file=${WORKSPACE}/config/SIT/test.properties -sharedmodule_file=${WORKSPACE}/shared_module/config/Test/sharedmodule.properties
          else
            bash ${WORKSPACE}/chc_scripts/cicd-scripts/TCI-Deployment/update_properties.sh -application_file=${WORKSPACE}/config/SIT/${INSTANCE_NAME}/test.properties -sharedmodule_file=${WORKSPACE}/shared_module/config/Test/${INSTANCE_NAME}/sharedmodule.properties
          fi
          cd ${WORKSPACE}/config/SIT
          mv manifest_test.json manifest.json

          
      - name: TCI Deployment
        run: |
          cd $WORKSPACE
          if [ -z "${INSTANCE_NAME}" ]; then
            config_file="${WORKSPACE}/config/SIT/config_test.json"
          else
            config_file="${WORKSPACE}/config/SIT/${INSTANCE_NAME}/config_test.json"
          fi
          APP_AGENT_KEY=$(jq -r '.hybrid_agent_key' "$config_file")
          export APP_AGENT_KEY=$APP_AGENT_KEY
          echo "hybrid agent key is ${APP_AGENT_KEY}"
          export DEPLOYMENT_SCRIPT=${WORKSPACE}/chc_scripts/cicd-scripts/TCI-Deployment/bin/tci
          if [ -z "${INSTANCE_NAME}" ]; then
            bash ${DEPLOYMENT_SCRIPT}/chc-render-application-properties.sh ${WORKSPACE}/config/SIT/test.properties /tmp/test.json
            bash ${DEPLOYMENT_SCRIPT}/chc-app-manage.sh deploy ${INTERFACE_NAME} /tmp/test.json ${WORKSPACE}/${INTERFACE_NAME}.application_1.0.0.ear ${WORKSPACE}/config/SIT/manifest.json       
          else
            bash ${DEPLOYMENT_SCRIPT}/chc-render-application-properties.sh ${WORKSPACE}/config/SIT/${INSTANCE_NAME}/test.properties /tmp/test.json
            bash ${DEPLOYMENT_SCRIPT}/chc-app-manage.sh deploy ${INTERFACE_NAME}_${INSTANCE_NAME} /tmp/test.json ${WORKSPACE}/${INTERFACE_NAME}.application_1.0.0.ear ${WORKSPACE}/config/SIT/manifest.json       
          fi
