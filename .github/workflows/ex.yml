name: Restart DEV Application

on:
  workflow_dispatch:
    inputs:   
      instance_count:
        description: Instance Count
        required: false
        default: 0
      command:
        description: start/stop/scale
        required: true

env:
  HTTP_PROXY: ${{ secrets.CHC_HTTP_PROXY }}
  HTTPS_PROXY: ${{ secrets.CHC_HTTPS_PROXY }}
  GITHUB_PAT: ${{ secrets.CHC_GITHUB_PAT }}
  JFROG_USERNAME:  ${{ secrets.JFROG_USERNAME }}
  JFROG_TOKEN: ${{ secrets.JFROG_TOKEN }}
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DEV_TCI_CLIENTID_CICD: ${{ secrets.DEV_TCI_CLIENT_ID }}
  DEV_TCI_CLIENTSECRET_CICD: ${{ secrets.DEV_TCI_CLIENT_SECRET }}
  SIT_TCI_CLIENTID_CICD: ${{ secrets.SIT_TCI_CLIENT_ID }}
  SIT_TCI_CLIENTSECRET_CICD: ${{ secrets.SIT_TCI_CLIENT_SECRET }}
  UAT_TCI_CLIENTID_CICD: ${{ secrets.UAT_TCI_CLIENT_ID }}
  UAT_TCI_CLIENTSECRET_CICD: ${{ secrets.UAT_TCI_CLIENT_SECRET }}
  BUILD_ID: ${{ github.run_number }}
  WORKSPACE: ${{ github.workspace }}
  CIC_TCI_CLIENTID_CICD: ${{ secrets.DEV_TCI_CLIENT_ID }}
  CIC_TCI_CLIENTSECRET_CICD: ${{ secrets.DEV_TCI_CLIENT_SECRET }}
  #BRANCH_NAME: ${{ github.event.inputs.branch_name }}
  REPONAME: ${{ github.event.repository.name }}

jobs:
  Restart_Applications:
    runs-on: ['atmos-aws-arc-runner-set']
    container:
      image: sanofi-docker-chc-tibco-local.jfrog.io/build-images/sanofi-chc-build-base:v1.0.0
      credentials:
        username: ${{ env.JFROG_USERNAME }}
        password: ${{ env.JFROG_TOKEN }}
    steps:
      - name: add repo to safe directory
        run: |
          git config --global --add safe.directory /__w/${REPONAME}/${REPONAME}
          
    #  - name: Checkout
    #    uses: actions/checkout@v2.3.4
    #    with:
    #      fetch-depth: 0
    #      submodules: 'true'
    #      ref: ${{ env.BRANCH_NAME }}
    #      token: ${{ env.GITHUB_PAT }}

      - name: CHC-App-Restart
        uses: actions/checkout@v2.3.4
        with:
          repository: Sanofi-GitHub/CHC-App-Restart
          ref: tibcli_restart
          path: CHC_Restart
          token: ${{ env.GITHUB_PAT }}

      - name: Install tibcli
        run: |
          sudo su
          cd ${WORKSPACE}/CHC_Restart/cicd-scripts/
          chmod -R 777 *
          ls -lrt
          ./tibcli --version
          #wget -qO- https://download.tibco.com/tibco/cloudintegration/1.0.0/linuxx86_64/tib_cli_1.0.0_linux_x86_64.zip | bsdtar -xvf- -C /usr/local/bin
          #chmod +x /usr/local/bin/tibcli

      - name: Determine action
        id: determine_action
        run: echo "::set-output name=command::$(echo ${{ github.event.inputs.command }} | tr '[:upper:]' '[:lower:]')"

      - name: Generate tibco token
        run: |
          response="$(
            curl -sS -w "\n%{http_code}" \
            "https://eu.account.cloud.tibco.com/idm/v1/oauth2/token" \
            --header "Content-Type: application/x-www-form-urlencoded" \
            --data "grant_type=client_credentials&scope=TCI&client_id=${{ secrets.DEV_TCI_CLIENT_ID }}&client_secret=${{ secrets.DEV_TCI_CLIENT_SECRET }}"
            )"
          json_response=$(echo $response | sed 's/ [0-9]\+$//')
          TCI_TOKEN=$(echo $json_response | jq -r '.access_token')
          sudo su
          cd ${WORKSPACE}/CHC_Restart/cicd-scripts/
          ./tibcli authorize --token $TCI_TOKEN
       #   ./tibcli app scaleto 0 bw.mc-files-confirmedPO

      - name: Execute action
        env:
           FILE: application_name.txt
        run: |
          cd $WORKSPACE
          #export DEPLOYMENT_SCRIPT=${WORKSPACE}/CHC_Restart/cicd-scripts/TCI-Deployment/bin/tci
          echo ${{ github.event.inputs.application_name }}
          #ls ${DEPLOYMENT_SCRIPT}
          action=$(echo "${{ steps.determine_action.outputs.command }}")
          for i in `cat $FILE`; do 
           case $action in
            start)
             #bash ${DEPLOYMENT_SCRIPT}/chc-app-manage2.sh scale $i ${{ github.event.inputs.instance_count }}
             #bash ${DEPLOYMENT_SCRIPT}/chc-app-manage2.sh start $i
              ./tibcli app scaleto 1 ${{ github.event.inputs.instance_count }} $i
              ;;
            stop)
              #bash ${DEPLOYMENT_SCRIPT}/chc-app-manage2.sh stop $i
              ./tibcli app scaleto 0 ${{ github.event.inputs.instance_count }} $i
              ;;
            scale)
              #bash ${DEPLOYMENT_SCRIPT}/chc-app-manage2.sh scale $i ${{ github.event.inputs.instance_count }}
              ./tibcli app scaleto ${{ github.event.inputs.instance_count }} $i
              ;;
            *)
              echo "Invalid action provided: $action"
              exit 1
              ;;
           esac
          done
        
          
      #- name: Authorize tibcli
        #run: |
         # tibcli authorize --token ${DEV_TCI_CLIENTSECRET_CICD}
      #- name: Execute action
      #  env:
      #    FILE: application_name.txt
      #  run: |
      #    cd $WORKSPACE
      #    echo ${{ github.event.inputs.application_name }}
      #    #ls ${DEPLOYMENT_SCRIPT}
      #    action=$(echo "${{ github.event.inputs.command }}" | tr '[:upper:]' '[:lower:]')
      #    
      #    for i in `cat $FILE`; do 
      #      case $action in
      #        start)
      #          # TIBCO command to start the application
      #          tibcli app scaleup ${{ github.event.inputs.instance_count }} $i
      #          ;;
      #        stop)
      #          # TIBCO command to stop the application
      #          tibcli app scaledown 0 $i
      #          ;;
      #        restart)
      #          # TIBCO command to restart the application
      #          tibcli app scaledown 0 $i
      #          sleep 180
      #          tibcli app scaleup ${{ github.event.inputs.instance_count }} $i
      #          ;;
      #        scale)
      #          # TIBCO command to scale the application
      #          tibcli app scaleup ${{ github.event.inputs.instance_count }} $i
      #          ;;
      #        *)
      #          echo "Invalid action provided: $action"
      #          exit 1
      #          ;;
      #      esac
      #    done
